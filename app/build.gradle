/**
 * gradle使用解释，学习的：https://www.cnblogs.com/steffen/p/9212765.html
 */

//com.android.application：表示这是一个应用程序模块，可以直接运行
//com.android.library：表示这是一个库模块，依赖于别的应用程序运行
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

kapt {
    generateStubs = true
}

android {
    //程序在编译时会检查lint，有任何错误就会停止build
    lintOptions {
        //出现错误，是否停止打包
        abortOnError false
        //打包release版本时，是否进行检测
        checkReleaseBuilds false
    }

    //编译sdk的版本，API Level
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.carter.androiddemo"
        minSdkVersion 23//最小sdk版本，否则无法使用
        targetSdkVersion 28//目标sdk版本，建议使用的版本
        versionCode 1
        versionName "1.0"
        //Instrumentation单元测试
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk{
            moduleName "Java2C" //so文件名
            abiFilters "arm64-v8a", "armeabi-v7a", "x86" //CPU类型
        }
        externalNativeBuild {
            cmake {
                cppFlags "Java2C"
                abiFilters "arm64-v8a", "armeabi-v7a", "x86"//生成多个版本的so文件
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt" //编译后so文件的名字
        }
    }

    //默认的文件路径
    sourceSets {
        main {

        }
        debug.setRoot('')//debug模式的路径
        release.setRoot('')//release模式的路径
    }

    //签名配置
    signingConfigs {
        //发布版签名配置
        release {

        }
        //debug版签名配置
        debug {

        }
    }

    //进行java的版本配置，以便使用对应版本的新特性;kotlin项目没有这个设置
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    //指定生成安装文件的配置，包含debug和release，直接运行的是debug安装文件
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

//指定当前项目的全部依赖关系：本地依赖、库依赖、远程依赖
//本地依赖：对本地jar包或目录添加依赖
//库依赖：  对项目中的库模块添加依赖
//远程依赖：对jcenter库上的开源项目依赖
//依赖格式为：“域名：项目名：版本号”
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //base
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["cardview-v7"]
    implementation rootProject.ext.dependencies["preference-v7"]
    implementation rootProject.ext.dependencies["preference-v14"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["constraint-layout"]

    //ui
    implementation rootProject.ext.dependencies["SmartRefreshLayout"]
    implementation rootProject.ext.dependencies["SmartRefreshHeader"]
    implementation rootProject.ext.dependencies["banner"]
    implementation rootProject.ext.dependencies["VerticalTabLayout"]
    implementation rootProject.ext.dependencies["flowlayout-lib"]
    implementation rootProject.ext.dependencies["agentweb"]
    implementation rootProject.ext.dependencies["autosize"]
    implementation rootProject.ext.dependencies["statusbar"]
    implementation rootProject.ext.dependencies["multipleStatusView"]

    //net
    implementation rootProject.ext.dependencies["gson"]
    implementation rootProject.ext.dependencies["okhttp"]
    implementation rootProject.ext.dependencies["logging-interceptor"]
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["converter-gson"]
    implementation rootProject.ext.dependencies["adapter-rxjava2"]
    implementation rootProject.ext.dependencies["glide"]
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    kapt rootProject.ext.dependencies["glide_compiler"]

    //dao
    implementation rootProject.ext.dependencies["greendao"]

    //rx
    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["rxbinding"]
    implementation rootProject.ext.dependencies["rxpermissions"]

    //di
//    implementation rootProject.ext.dependencies["dagger2"]
//    implementation rootProject.ext.dependencies["dagger2-android"]
//    implementation rootProject.ext.dependencies["dagger2-android-support"]
//    kapt rootProject.ext.dependencies["dagger2-compiler"]
//    kapt rootProject.ext.dependencies["dagger2-android-processor"]
    implementation rootProject.ext.dependencies["javax_annotation"]
    implementation rootProject.ext.dependencies["butterknife"]
    kapt rootProject.ext.dependencies["butterknife-compiler"]

    //multidex
    implementation rootProject.ext.dependencies["multidex"]

    //canary
    debugImplementation rootProject.ext.dependencies["leakcanary-android"]
    releaseImplementation rootProject.ext.dependencies["leakcanary-android-no-op"]
    testImplementation rootProject.ext.dependencies["leakcanary-android-no-op"]

    //kotlin
//    implementation rootProject.ext.dependencies["kotlin-stdlib"]

    //other
    implementation rootProject.ext.dependencies["androideventbus"]
    implementation rootProject.ext.dependencies["lottie"]
    implementation rootProject.ext.dependencies["BaseRecyclerViewAdapterHelper"]
    implementation rootProject.ext.dependencies["fragmentation"]
    implementation rootProject.ext.dependencies["fragmentation-swipeback"]
    implementation rootProject.ext.dependencies["crashreport_upgrade"]
    implementation rootProject.ext.dependencies["logger"]
    implementation rootProject.ext.dependencies["ByeBurger"]
    implementation rootProject.ext.dependencies["stetho"]
    implementation rootProject.ext.dependencies["stetho-okhttp3"]
    implementation rootProject.ext.dependencies["PersistentCookieJar"]
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

//使用maven仓库。
//Android有两个标准的library文件服务器，一个jcenter，一个maven。
//jcenter有的maven可能没有，maven有的jcenter也可能没有。
//如果使用jcenter，就把mavenCentral替换成jcenter()
repositories {
    mavenCentral()
}
